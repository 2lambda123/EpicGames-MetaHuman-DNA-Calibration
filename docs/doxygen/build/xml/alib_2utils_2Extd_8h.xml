<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="alib_2utils_2Extd_8h" kind="file" language="C++">
    <compoundname>alib/utils/Extd.h</compoundname>
    <includes local="no">cstddef</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">functional</includes>
    <includes local="no">iterator</includes>
    <includes local="no">set</includes>
    <includes local="no">vector</includes>
    <includedby refid="alib_2dna_2filters_2AnimatedMapFilter_8cpp" local="yes">AnimatedMapFilter.cpp</includedby>
    <includedby refid="alib_2dna_2filters_2BlendShapeFilter_8cpp" local="yes">BlendShapeFilter.cpp</includedby>
    <includedby refid="DNACalibDNAReaderImpl_8cpp" local="yes">DNACalibDNAReaderImpl.cpp</includedby>
    <includedby refid="dnacalib_2dna_2DenormalizedData_8h" local="yes">DenormalizedData.h</includedby>
    <includedby refid="alib_2dna_2filters_2JointFilter_8cpp" local="yes">JointFilter.cpp</includedby>
    <includedby refid="dnacalib_2dna_2LODConstraint_8cpp" local="yes">LODConstraint.cpp</includedby>
    <includedby refid="dnacalib_2dna_2LODMapping_8cpp" local="yes">LODMapping.cpp</includedby>
    <includedby refid="alib_2dna_2filters_2MeshFilter_8cpp" local="yes">MeshFilter.cpp</includedby>
    <includedby refid="alib_2dna_2filters_2Remap_8h" local="yes">Remap.h</includedby>
    <includedby refid="SupportFactories_8h" local="yes">SupportFactories.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>Extd.h</label>
        <link refid="alib_2utils_2Extd_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>algorithm</label>
      </node>
      <node id="2">
        <label>cstddef</label>
      </node>
      <node id="4">
        <label>functional</label>
      </node>
      <node id="5">
        <label>iterator</label>
      </node>
      <node id="6">
        <label>set</label>
      </node>
      <node id="7">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="8">
        <label>CalculateMeshLowerLODsCommand.cpp</label>
        <link refid="CalculateMeshLowerLODsCommand_8cpp"/>
      </node>
      <node id="9">
        <label>ClearBlendShapesCommand.cpp</label>
        <link refid="ClearBlendShapesCommand_8cpp"/>
      </node>
      <node id="10">
        <label>PruneBlendShapeTargetsCommand.cpp</label>
        <link refid="PruneBlendShapeTargetsCommand_8cpp"/>
      </node>
      <node id="11">
        <label>RemoveAnimatedMapCommand.cpp</label>
        <link refid="RemoveAnimatedMapCommand_8cpp"/>
      </node>
      <node id="12">
        <label>RemoveBlendShapeCommand.cpp</label>
        <link refid="RemoveBlendShapeCommand_8cpp"/>
      </node>
      <node id="13">
        <label>RemoveJointAnimationCommand.cpp</label>
        <link refid="RemoveJointAnimationCommand_8cpp"/>
      </node>
      <node id="14">
        <label>RemoveJointCommand.cpp</label>
        <link refid="RemoveJointCommand_8cpp"/>
      </node>
      <node id="15">
        <label>RemoveMeshCommand.cpp</label>
        <link refid="RemoveMeshCommand_8cpp"/>
      </node>
      <node id="16">
        <label>RenameAnimatedMapCommand.cpp</label>
        <link refid="RenameAnimatedMapCommand_8cpp"/>
      </node>
      <node id="17">
        <label>RenameBlendShapeCommand.cpp</label>
        <link refid="RenameBlendShapeCommand_8cpp"/>
      </node>
      <node id="18">
        <label>RenameJointCommand.cpp</label>
        <link refid="RenameJointCommand_8cpp"/>
      </node>
      <node id="19">
        <label>RenameMeshCommand.cpp</label>
        <link refid="RenameMeshCommand_8cpp"/>
      </node>
      <node id="20">
        <label>RenameResourceCommand.h</label>
        <link refid="RenameResourceCommand_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>RotateCommand.cpp</label>
        <link refid="RotateCommand_8cpp"/>
      </node>
      <node id="22">
        <label>ScaleCommand.cpp</label>
        <link refid="ScaleCommand_8cpp"/>
      </node>
      <node id="23">
        <label>SetBlendShapeTargetDeltasCommand.cpp</label>
        <link refid="SetBlendShapeTargetDeltasCommand_8cpp"/>
      </node>
      <node id="24">
        <label>SetLODsCommand.cpp</label>
        <link refid="SetLODsCommand_8cpp"/>
      </node>
      <node id="25">
        <label>SetNeutralJointRotationsCommand.cpp</label>
        <link refid="SetNeutralJointRotationsCommand_8cpp"/>
      </node>
      <node id="26">
        <label>SetNeutralJointTranslationsCommand.cpp</label>
        <link refid="SetNeutralJointTranslationsCommand_8cpp"/>
      </node>
      <node id="27">
        <label>SetSkinWeightsCommand.cpp</label>
        <link refid="SetSkinWeightsCommand_8cpp"/>
      </node>
      <node id="28">
        <label>SetVertexPositionsCommand.cpp</label>
        <link refid="SetVertexPositionsCommand_8cpp"/>
      </node>
      <node id="35">
        <label>SupportFactories.h</label>
        <link refid="SupportFactories_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>TranslateCommand.cpp</label>
        <link refid="TranslateCommand_8cpp"/>
      </node>
      <node id="4">
        <label>DNACalibDNAReaderImpl.cpp</label>
        <link refid="DNACalibDNAReaderImpl_8cpp"/>
      </node>
      <node id="7">
        <label>DNACalibDNAReaderImpl.h</label>
        <link refid="DNACalibDNAReaderImpl_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>DenormalizedData.h</label>
        <link refid="dnacalib_2dna_2DenormalizedData_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>LODConstraint.cpp</label>
        <link refid="dnacalib_2dna_2LODConstraint_8cpp"/>
      </node>
      <node id="32">
        <label>LODMapping.cpp</label>
        <link refid="dnacalib_2dna_2LODMapping_8cpp"/>
      </node>
      <node id="6">
        <label>ReaderImpl.h</label>
        <link refid="dnacalib_2dna_2ReaderImpl_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>AnimatedMapFilter.cpp</label>
        <link refid="alib_2dna_2filters_2AnimatedMapFilter_8cpp"/>
      </node>
      <node id="3">
        <label>BlendShapeFilter.cpp</label>
        <link refid="alib_2dna_2filters_2BlendShapeFilter_8cpp"/>
      </node>
      <node id="30">
        <label>JointFilter.cpp</label>
        <link refid="alib_2dna_2filters_2JointFilter_8cpp"/>
      </node>
      <node id="33">
        <label>MeshFilter.cpp</label>
        <link refid="alib_2dna_2filters_2MeshFilter_8cpp"/>
      </node>
      <node id="34">
        <label>Remap.h</label>
        <link refid="alib_2dna_2filters_2Remap_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>Extd.h</label>
        <link refid="alib_2utils_2Extd_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classextd_1_1impl_1_1LUTFilter" prot="public">extd::impl::LUTFilter</innerclass>
    <innernamespace refid="namespaceextd">extd</innernamespace>
    <innernamespace refid="namespaceextd_1_1impl">extd::impl</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="alib_2utils_2Extd_8h_1a6f2b38df317b82e904ce080059a9b07a" prot="public" static="no">
        <name>EXTD_GUARD</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/src/dnacalib/utils/Extd.h" line="7" column="9" bodyfile="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/src/dnacalib/utils/Extd.h" bodystart="7" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>Epic<sp/>Games,<sp/>Inc.<sp/>All<sp/>Rights<sp/>Reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*INDENT-OFF*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>EXTD_GUARD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7" refid="alib_2utils_2Extd_8h_1a6f2b38df317b82e904ce080059a9b07a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXTD_GUARD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#pragma<sp/>warning(push)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#pragma<sp/>warning(disable<sp/>:<sp/>4365<sp/>4987)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#pragma<sp/>warning(pop)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceextd" kindref="compound">extd</ref><sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T<sp/><ref refid="namespaceextd_1a13bcced933cb56cda021c8147221128d" kindref="member">clamp</ref>(T<sp/>value,<sp/>T<sp/>low,<sp/>T<sp/>high)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::min(std::max(value,<sp/>low),<sp/>high);</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T<sp/><ref refid="namespaceextd_1aa41829cae2fe5396352313132070aeef" kindref="member">roundUp</ref>(T<sp/>number,<sp/>T<sp/>multiple)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((number<sp/>+<sp/>multiple<sp/>-<sp/>1)<sp/>/<sp/>multiple)<sp/>*<sp/>multiple;</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T<sp/><ref refid="namespaceextd_1af9c82132c5cad37d0a14ae9b7457cf09" kindref="member">interpolate</ref>(T<sp/>a,<sp/>T<sp/>b,<sp/>T<sp/>weight)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>*<sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1)<sp/>-<sp/>weight)<sp/>+<sp/>b<sp/>*<sp/>weight;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TInputIterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceextd_1a002ec342c016b4bc7cb2a886e13638c2" kindref="member">contains</ref>(TInputIterator<sp/>first,<sp/>TInputIterator<sp/>last,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::find(first,<sp/>last,<sp/>value)<sp/>!=<sp/>last;</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TContainer,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceextd_1a002ec342c016b4bc7cb2a886e13638c2" kindref="member">contains</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TContainer&amp;<sp/>container,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceextd_1a002ec342c016b4bc7cb2a886e13638c2" kindref="member">contains</ref>(std::begin(container),<sp/>std::end(container),<sp/>value);</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceextd_1a002ec342c016b4bc7cb2a886e13638c2" kindref="member">contains</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::set&lt;T&gt;&amp;<sp/>container,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>container.find(value)<sp/>!=<sp/>container.end();</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Predicate,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceextd_1af79bdbc746eeddf99379cbc5d4474e5b" kindref="member">filter</ref>(std::vector&lt;T,<sp/>Args...&gt;&amp;<sp/>source,<sp/>Predicate<sp/>pred)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>source.erase(std::remove_if(std::begin(source),<sp/>std::end(source),<sp/>[&amp;source,<sp/>&amp;pred](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>index<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;value<sp/>-<sp/>&amp;(source.front()));</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!pred(value,<sp/>index);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}),<sp/>source.end());</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TContainer,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Predicate,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceextd_1af79bdbc746eeddf99379cbc5d4474e5b" kindref="member">filter</ref>(TContainer&amp;<sp/>source,<sp/>Predicate<sp/>pred)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">value_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TContainer::value_type;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>newEnd<sp/>=<sp/>std::remove_if(std::begin(source),<sp/>std::end(source),<sp/>[&amp;source,<sp/>&amp;pred](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>value_type&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>index<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;value<sp/>-<sp/>source.data());</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!pred(value,<sp/>index);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>newSize<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::distance(source.begin(),<sp/>newEnd));</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>source.resize(newSize);</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">impl<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="namespaceextd_1_1impl_1a2630e2129dd46aec73a8dbbf9728a3ef" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/><ref refid="namespaceextd_1_1impl_1a2630e2129dd46aec73a8dbbf9728a3ef" kindref="member">LUTStrategy</ref><sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceextd_1_1impl_1a2630e2129dd46aec73a8dbbf9728a3efad678aba164b442f27e193f3f05ef614f" kindref="member">ByValue</ref>,</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceextd_1_1impl_1a2630e2129dd46aec73a8dbbf9728a3efa95fe1743f1f06b9d7a4dac06c57635ed" kindref="member">ByPosition</ref></highlight></codeline>
<codeline lineno="78"><highlight class="normal">};</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TLUT,<sp/>LUTStrategy<sp/>Strategy&gt;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">LUTFilter<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="83" refid="classextd_1_1impl_1_1LUTFilter_1af210f90d4ef9445a5259a670ff73fab0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classextd_1_1impl_1_1LUTFilter_1af210f90d4ef9445a5259a670ff73fab0" kindref="member">LUTFilter</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TLUT&amp;<sp/>lut_)<sp/>:<sp/><ref refid="classextd_1_1impl_1_1LUTFilter_1a892768b51af74a86cd0997ce6b386b53" kindref="member">lut</ref>{lut_}<sp/>{}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>LUTStrategy<sp/>ChosenStrategy<sp/>=<sp/>Strategy&gt;</highlight></codeline>
<codeline lineno="86" refid="classextd_1_1impl_1_1LUTFilter_1a835e6e3324f328cb9541dc0852ff7304" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;ChosenStrategy<sp/>==<sp/>LUTStrategy::ByValue,<sp/>bool&gt;::type<sp/><ref refid="classextd_1_1impl_1_1LUTFilter_1a835e6e3324f328cb9541dc0852ff7304" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value,<sp/>std::size_t<sp/></highlight><highlight class="comment">/*unused*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceextd_1a002ec342c016b4bc7cb2a886e13638c2" kindref="member">contains</ref>(<ref refid="classextd_1_1impl_1_1LUTFilter_1a892768b51af74a86cd0997ce6b386b53" kindref="member">lut</ref>,<sp/>value);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>LUTStrategy<sp/>ChosenStrategy<sp/>=<sp/>Strategy&gt;</highlight></codeline>
<codeline lineno="91" refid="classextd_1_1impl_1_1LUTFilter_1ac8f190e486b570cdbd9129af0210f597" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;ChosenStrategy<sp/>==<sp/>LUTStrategy::ByPosition,<sp/>bool&gt;::type<sp/><ref refid="classextd_1_1impl_1_1LUTFilter_1ac8f190e486b570cdbd9129af0210f597" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/></highlight><highlight class="comment">/*unused*/</highlight><highlight class="normal">,<sp/>std::size_t<sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceextd_1a002ec342c016b4bc7cb2a886e13638c2" kindref="member">contains</ref>(<ref refid="classextd_1_1impl_1_1LUTFilter_1a892768b51af74a86cd0997ce6b386b53" kindref="member">lut</ref>,<sp/>index);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TLUT&amp;<sp/><ref refid="classextd_1_1impl_1_1LUTFilter_1a892768b51af74a86cd0997ce6b386b53" kindref="member">lut</ref>;</highlight></codeline>
<codeline lineno="97"><highlight class="normal">};</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>impl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TLookUpTable&gt;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>impl::LUTFilter&lt;TLookUpTable,<sp/>impl::LUTStrategy::ByValue&gt;<sp/><ref refid="namespaceextd_1adf77bdf35ce017521b1f44155c90ffb3" kindref="member">byValue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TLookUpTable&amp;<sp/>lookUpTable)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl::LUTFilter&lt;TLookUpTable,<sp/>impl::LUTStrategy::ByValue&gt;{lookUpTable};</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TLookUpTable&gt;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>impl::LUTFilter&lt;TLookUpTable,<sp/>impl::LUTStrategy::ByPosition&gt;<sp/><ref refid="namespaceextd_1a221ca03908027a0215902298b500af85" kindref="member">byPosition</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TLookUpTable&amp;<sp/>lookUpTable)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl::LUTFilter&lt;TLookUpTable,<sp/>impl::LUTStrategy::ByPosition&gt;{lookUpTable};</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TContainer&gt;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TContainer::value_type<sp/><ref refid="namespaceextd_1a4f7fd6d2283b5f448b5aaf4936a8a192" kindref="member">maxOf</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TContainer&amp;<sp/>container)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!container.empty());</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">ValueType<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TContainer::value_type;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>compare<sp/>=<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ValueType&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ValueType&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.second<sp/>&lt;<sp/>rhs.second;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>std::max_element(container.begin(),<sp/>container.end(),<sp/>compare);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>container.end()<sp/>?<sp/>ValueType{}<sp/>:<sp/>*it);</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TSource,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TDestination&gt;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceextd_1a12ea8bc7218925e96a95740ba8110da2" kindref="member">copy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TSource&amp;<sp/>source,<sp/>TDestination&amp;<sp/>destination)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceextd_1a12ea8bc7218925e96a95740ba8110da2" kindref="member">std::copy</ref>(std::begin(source),<sp/>std::end(source),<sp/>std::back_inserter(destination));</highlight></codeline>
<codeline lineno="125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TIterator,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TDistance&gt;</highlight></codeline>
<codeline lineno="128"><highlight class="normal">TIterator<sp/><ref refid="namespaceextd_1ac5f74af23e110454a3f5f7b79ba27378" kindref="member">advanced</ref>(TIterator<sp/>source,<sp/>TDistance<sp/>distance)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>std::advance(source,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">typename<sp/>std::iterator_traits&lt;TIterator&gt;::difference_type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(distance));</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>source;</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TIterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Predicate&gt;</highlight></codeline>
<codeline lineno="134" refid="namespaceextd_1a70d4ed48670ab7c5c92e9446fd6ea4cb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TIterator::difference_type<sp/><ref refid="namespaceextd_1a87b58807dd8bd47ecca314742ca5698f" kindref="member">advanceWhile</ref>(TIterator&amp;<sp/>it,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TIterator&amp;<sp/>end,<sp/>Predicate<sp/>pred)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>it;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>end<sp/>&amp;&amp;<sp/>pred(*it))<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::distance(start,<sp/>it);</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>extd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>EXTD_GUARD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*INDENT-ON*</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/src/dnacalib/utils/Extd.h"/>
  </compounddef>
</doxygen>
