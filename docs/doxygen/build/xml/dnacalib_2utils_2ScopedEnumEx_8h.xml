<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="dnacalib_2utils_2ScopedEnumEx_8h" kind="file" language="C++">
    <compoundname>dnacalib/utils/ScopedEnumEx.h</compoundname>
    <includes local="no">type_traits</includes>
    <incdepgraph>
      <node id="1">
        <label>ScopedEnumEx.h</label>
        <link refid="dnacalib_2utils_2ScopedEnumEx_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>type_traits</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacednac">dnac</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>Epic<sp/>Games,<sp/>Inc.<sp/>All<sp/>Rights<sp/>Reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacednac" kindref="compound">dnac</ref><sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TEnum&gt;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;std::is_enum&lt;TEnum&gt;::value,<sp/>TEnum&gt;::type</highlight></codeline>
<codeline lineno="11" refid="namespacednac_1a0e46c4d3be1bf2a3d2a364e07175d321" refkind="member"><highlight class="normal"><ref refid="namespacednac_1a0e46c4d3be1bf2a3d2a364e07175d321" kindref="member">operator&amp;</ref>(TEnum<sp/>lhs,<sp/>TEnum<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Underlying<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::underlying_type&lt;TEnum&gt;::type;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TEnum</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Underlying</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(lhs)<sp/>&amp;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Underlying</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rhs));</highlight></codeline>
<codeline lineno="14"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TEnum&gt;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;std::is_enum&lt;TEnum&gt;::value,<sp/>TEnum&gt;::type</highlight></codeline>
<codeline lineno="18" refid="namespacednac_1a3e2a14f36ad814c1071fe983950688a3" refkind="member"><highlight class="normal"><ref refid="namespacednac_1a3e2a14f36ad814c1071fe983950688a3" kindref="member">operator|</ref>(TEnum<sp/>lhs,<sp/>TEnum<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Underlying<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::underlying_type&lt;TEnum&gt;::type;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TEnum</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Underlying</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(lhs)<sp/>|<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Underlying</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rhs));</highlight></codeline>
<codeline lineno="21"><highlight class="normal">}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TEnum&gt;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;std::is_enum&lt;TEnum&gt;::value,<sp/>TEnum&gt;::type</highlight></codeline>
<codeline lineno="25" refid="namespacednac_1a94452cfca710e121b2bbc1918c61b88e" refkind="member"><highlight class="normal"><ref refid="namespacednac_1a94452cfca710e121b2bbc1918c61b88e" kindref="member">operator^</ref>(TEnum<sp/>lhs,<sp/>TEnum<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Underlying<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::underlying_type&lt;TEnum&gt;::type;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TEnum</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Underlying</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(lhs)<sp/>^<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Underlying</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rhs));</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TEnum&gt;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;std::is_enum&lt;TEnum&gt;::value,<sp/>TEnum&gt;::type</highlight></codeline>
<codeline lineno="32" refid="namespacednac_1aaaf75c7d56532c3b1bdcfc59f42155dd" refkind="member"><highlight class="normal"><ref refid="namespacednac_1aaaf75c7d56532c3b1bdcfc59f42155dd" kindref="member">operator~</ref>(TEnum<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Underlying<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::underlying_type&lt;TEnum&gt;::type;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TEnum</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(~static_cast&lt;Underlying&gt;(value));</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TEnum&gt;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;std::is_enum&lt;TEnum&gt;::value,<sp/>TEnum&gt;::type</highlight></codeline>
<codeline lineno="39" refid="namespacednac_1a0e73deba860f4d4e7bd3ecae7a7ed70e" refkind="member"><highlight class="normal"><ref refid="namespacednac_1a0e73deba860f4d4e7bd3ecae7a7ed70e" kindref="member">operator&amp;=</ref>(TEnum&amp;<sp/>lhs,<sp/>TEnum<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs<sp/>=<sp/>(lhs<sp/>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TEnum&gt;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;std::is_enum&lt;TEnum&gt;::value,<sp/>TEnum&gt;::type</highlight></codeline>
<codeline lineno="45" refid="namespacednac_1a935195168a7d4e86d9fdcc08715f9c81" refkind="member"><highlight class="normal"><ref refid="namespacednac_1a935195168a7d4e86d9fdcc08715f9c81" kindref="member">operator|=</ref>(TEnum&amp;<sp/>lhs,<sp/>TEnum<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs<sp/>=<sp/>(lhs<sp/>|<sp/>rhs);</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TEnum&gt;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;std::is_enum&lt;TEnum&gt;::value,<sp/>TEnum&gt;::type</highlight></codeline>
<codeline lineno="51" refid="namespacednac_1a1db9cc2a89b096fde759e2d44cfce42b" refkind="member"><highlight class="normal"><ref refid="namespacednac_1a1db9cc2a89b096fde759e2d44cfce42b" kindref="member">operator^=</ref>(TEnum&amp;<sp/>lhs,<sp/>TEnum<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs<sp/>=<sp/>(lhs<sp/>^<sp/>rhs);</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TEnum&gt;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;std::is_enum&lt;TEnum&gt;::value,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;::type</highlight></codeline>
<codeline lineno="57" refid="namespacednac_1a3f8cbd424839e2e73030b1bd098b2f96" refkind="member"><highlight class="normal"><ref refid="namespacednac_1a3f8cbd424839e2e73030b1bd098b2f96" kindref="member">contains</ref>(TEnum<sp/>lhs,<sp/>TEnum<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(lhs<sp/>&amp;<sp/>rhs)<sp/>==<sp/>rhs;</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>dnac</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/src/dnacalib/utils/ScopedEnumEx.h"/>
  </compounddef>
</doxygen>
