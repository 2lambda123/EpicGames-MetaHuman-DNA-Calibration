<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="namespacetrust" kind="namespace" language="C++">
    <compoundname>trust</compoundname>
    <innerclass refid="classtrust_1_1ArrayView" prot="public">trust::ArrayView</innerclass>
    <innerclass refid="structtrust_1_1ArrayViewTraits" prot="public">trust::ArrayViewTraits</innerclass>
    <innerclass refid="structtrust_1_1ArrayViewTraits_3_01const_01T_01_4" prot="public">trust::ArrayViewTraits&lt; const T &gt;</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacetrust_1a4a980312bc53b817728287869e10b346" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtrust_1_1ArrayView" kindref="compound">ArrayView</ref>&lt; const T &gt;</type>
        <definition>using trust::ConstArrayView = typedef ArrayView&lt;const T&gt;</definition>
        <argsstring></argsstring>
        <name>ConstArrayView</name>
        <qualifiedname>trust::ConstArrayView</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/include/dna/types/ArrayView.h" line="225" column="1" bodyfile="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/include/dna/types/ArrayView.h" bodystart="225" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacetrust_1a4171447fe6c0913bf0fc86476485eb32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool trust::operator==</definition>
        <argsstring>(const ArrayView&lt; T &gt; &amp;lhs, const ArrayView&lt; U &gt; &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>trust::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classtrust_1_1ArrayView" kindref="compound">ArrayView</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classtrust_1_1ArrayView" kindref="compound">ArrayView</ref>&lt; U &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/include/dna/types/ArrayView.h" line="174" column="6" bodyfile="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/include/dna/types/ArrayView.h" bodystart="174" bodyend="188"/>
        <references refid="classtrust_1_1ArrayView_1a9cac7104fbf6f9ee0c6c73a735417a55" compoundref="ArrayView_8h" startline="110" endline="112">trust::ArrayView&lt; T &gt;::begin</references>
        <references refid="classtrust_1_1ArrayView_1a90e50dd55c347dadd8863e21696e6f64" compoundref="ArrayView_8h" startline="102" endline="104">trust::ArrayView&lt; T &gt;::data</references>
        <references refid="classtrust_1_1ArrayView_1a91f5a024a12d5056a30968c4033d63d9" compoundref="ArrayView_8h" startline="114" endline="116">trust::ArrayView&lt; T &gt;::end</references>
        <references refid="classtrust_1_1ArrayView_1aa48cd68fa1945b211ae43d12dec68384" compoundref="ArrayView_8h" startline="98" endline="100">trust::ArrayView&lt; T &gt;::size</references>
      </memberdef>
      <memberdef kind="function" id="namespacetrust_1ab0e76e2d42e9edb7e9637d55840f3cf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool trust::operator!=</definition>
        <argsstring>(const ArrayView&lt; T &gt; &amp;lhs, const ArrayView&lt; U &gt; &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>trust::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classtrust_1_1ArrayView" kindref="compound">ArrayView</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classtrust_1_1ArrayView" kindref="compound">ArrayView</ref>&lt; U &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/include/dna/types/ArrayView.h" line="191" column="6" bodyfile="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/include/dna/types/ArrayView.h" bodystart="191" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="namespacetrust_1a969e3f42bedec07fea1c86fdf456f4d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename TContainer</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool trust::operator==</definition>
        <argsstring>(const ArrayView&lt; T &gt; &amp;lhs, const TContainer &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>trust::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classtrust_1_1ArrayView" kindref="compound">ArrayView</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const TContainer &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/include/dna/types/ArrayView.h" line="196" column="6" bodyfile="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/include/dna/types/ArrayView.h" bodystart="196" bodyend="207"/>
        <references refid="classtrust_1_1ArrayView_1a9cac7104fbf6f9ee0c6c73a735417a55" compoundref="ArrayView_8h" startline="110" endline="112">trust::ArrayView&lt; T &gt;::begin</references>
        <references refid="classtrust_1_1ArrayView_1a91f5a024a12d5056a30968c4033d63d9" compoundref="ArrayView_8h" startline="114" endline="116">trust::ArrayView&lt; T &gt;::end</references>
        <references refid="classtrust_1_1ArrayView_1aa48cd68fa1945b211ae43d12dec68384" compoundref="ArrayView_8h" startline="98" endline="100">trust::ArrayView&lt; T &gt;::size</references>
      </memberdef>
      <memberdef kind="function" id="namespacetrust_1ae8ff99aca51d75cd3fba7464f356d751" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename TContainer</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool trust::operator!=</definition>
        <argsstring>(const ArrayView&lt; T &gt; &amp;lhs, const TContainer &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>trust::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classtrust_1_1ArrayView" kindref="compound">ArrayView</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const TContainer &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/include/dna/types/ArrayView.h" line="210" column="6" bodyfile="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/include/dna/types/ArrayView.h" bodystart="210" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="namespacetrust_1ad40a07523cf9bae22c9862d8df690a5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename TContainer</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool trust::operator==</definition>
        <argsstring>(const TContainer &amp;lhs, const ArrayView&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>trust::operator==</qualifiedname>
        <param>
          <type>const TContainer &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classtrust_1_1ArrayView" kindref="compound">ArrayView</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/include/dna/types/ArrayView.h" line="215" column="6" bodyfile="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/include/dna/types/ArrayView.h" bodystart="215" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="namespacetrust_1af4feebc88cdd1ce5ef4e7bca773a7383" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename TContainer</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool trust::operator!=</definition>
        <argsstring>(const TContainer &amp;lhs, const ArrayView&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>trust::operator!=</qualifiedname>
        <param>
          <type>const TContainer &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classtrust_1_1ArrayView" kindref="compound">ArrayView</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/include/dna/types/ArrayView.h" line="220" column="6" bodyfile="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/include/dna/types/ArrayView.h" bodystart="220" bodyend="222"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/include/dna/types/ArrayView.h" line="20" column="1"/>
  </compounddef>
</doxygen>
