<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="trio_2utils_2ScopedEnumEx_8h" kind="file" language="C++">
    <compoundname>trio/utils/ScopedEnumEx.h</compoundname>
    <includes local="no">type_traits</includes>
    <includedby refid="FileStreamImpl_8cpp" local="yes">FileStreamImpl.cpp</includedby>
    <includedby refid="MemoryMappedFileStreamFallback_8cpp" local="yes">MemoryMappedFileStreamFallback.cpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>ScopedEnumEx.h</label>
        <link refid="trio_2utils_2ScopedEnumEx_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>type_traits</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>FileStreamImpl.cpp</label>
        <link refid="FileStreamImpl_8cpp"/>
      </node>
      <node id="3">
        <label>MemoryMappedFileStreamFallback.cpp</label>
        <link refid="MemoryMappedFileStreamFallback_8cpp"/>
      </node>
      <node id="1">
        <label>ScopedEnumEx.h</label>
        <link refid="trio_2utils_2ScopedEnumEx_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacetrio">trio</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>Epic<sp/>Games,<sp/>Inc.<sp/>All<sp/>Rights<sp/>Reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetrio" kindref="compound">trio</ref><sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TEnum&gt;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;std::is_enum&lt;TEnum&gt;::value,<sp/>TEnum&gt;::type</highlight></codeline>
<codeline lineno="11" refid="namespacetrio_1ae5bd4f7916560510c90291825c1145bf" refkind="member"><highlight class="normal"><ref refid="namespacetrio_1ae5bd4f7916560510c90291825c1145bf" kindref="member">operator&amp;</ref>(TEnum<sp/>lhs,<sp/>TEnum<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Underlying<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::underlying_type&lt;TEnum&gt;::type;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TEnum</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Underlying</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(lhs)<sp/>&amp;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Underlying</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rhs));</highlight></codeline>
<codeline lineno="14"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TEnum&gt;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;std::is_enum&lt;TEnum&gt;::value,<sp/>TEnum&gt;::type</highlight></codeline>
<codeline lineno="18" refid="namespacetrio_1adfb0aef3c528a124093f7e578913b445" refkind="member"><highlight class="normal"><ref refid="namespacetrio_1adfb0aef3c528a124093f7e578913b445" kindref="member">operator|</ref>(TEnum<sp/>lhs,<sp/>TEnum<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Underlying<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::underlying_type&lt;TEnum&gt;::type;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TEnum</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Underlying</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(lhs)<sp/>|<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Underlying</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rhs));</highlight></codeline>
<codeline lineno="21"><highlight class="normal">}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TEnum&gt;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;std::is_enum&lt;TEnum&gt;::value,<sp/>TEnum&gt;::type</highlight></codeline>
<codeline lineno="25" refid="namespacetrio_1abdd2f870385e7f29c47d79951b07bc04" refkind="member"><highlight class="normal"><ref refid="namespacetrio_1abdd2f870385e7f29c47d79951b07bc04" kindref="member">operator^</ref>(TEnum<sp/>lhs,<sp/>TEnum<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Underlying<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::underlying_type&lt;TEnum&gt;::type;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TEnum</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Underlying</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(lhs)<sp/>^<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Underlying</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rhs));</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TEnum&gt;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;std::is_enum&lt;TEnum&gt;::value,<sp/>TEnum&gt;::type</highlight></codeline>
<codeline lineno="32" refid="namespacetrio_1a5cd48709d186ec26f3964cd2c1f57a69" refkind="member"><highlight class="normal"><ref refid="namespacetrio_1a5cd48709d186ec26f3964cd2c1f57a69" kindref="member">operator~</ref>(TEnum<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Underlying<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::underlying_type&lt;TEnum&gt;::type;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TEnum</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(~static_cast&lt;Underlying&gt;(value));</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TEnum&gt;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;std::is_enum&lt;TEnum&gt;::value,<sp/>TEnum&gt;::type</highlight></codeline>
<codeline lineno="39" refid="namespacetrio_1a204504c976a3055d9abccae370e1e789" refkind="member"><highlight class="normal"><ref refid="namespacetrio_1a204504c976a3055d9abccae370e1e789" kindref="member">operator&amp;=</ref>(TEnum&amp;<sp/>lhs,<sp/>TEnum<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs<sp/>=<sp/>(lhs<sp/>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TEnum&gt;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;std::is_enum&lt;TEnum&gt;::value,<sp/>TEnum&gt;::type</highlight></codeline>
<codeline lineno="45" refid="namespacetrio_1afc7dbafd11e71f3d7acc02c510a7e5a9" refkind="member"><highlight class="normal"><ref refid="namespacetrio_1afc7dbafd11e71f3d7acc02c510a7e5a9" kindref="member">operator|=</ref>(TEnum&amp;<sp/>lhs,<sp/>TEnum<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs<sp/>=<sp/>(lhs<sp/>|<sp/>rhs);</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TEnum&gt;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;std::is_enum&lt;TEnum&gt;::value,<sp/>TEnum&gt;::type</highlight></codeline>
<codeline lineno="51" refid="namespacetrio_1a0815b8b7c870c92e8064dbf3d3426051" refkind="member"><highlight class="normal"><ref refid="namespacetrio_1a0815b8b7c870c92e8064dbf3d3426051" kindref="member">operator^=</ref>(TEnum&amp;<sp/>lhs,<sp/>TEnum<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs<sp/>=<sp/>(lhs<sp/>^<sp/>rhs);</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TEnum&gt;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;std::is_enum&lt;TEnum&gt;::value,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;::type</highlight></codeline>
<codeline lineno="57" refid="namespacetrio_1a4a9deb5723842416dbadbb9f84554049" refkind="member"><highlight class="normal"><ref refid="namespacetrio_1a4a9deb5723842416dbadbb9f84554049" kindref="member">contains</ref>(TEnum<sp/>lhs,<sp/>TEnum<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(lhs<sp/>&amp;<sp/>rhs)<sp/>==<sp/>rhs;</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>trio</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/src/trio/utils/ScopedEnumEx.h"/>
  </compounddef>
</doxygen>
