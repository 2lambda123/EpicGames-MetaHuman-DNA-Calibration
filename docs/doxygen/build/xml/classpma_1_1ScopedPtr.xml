<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="classpma_1_1ScopedPtr" kind="class" language="C++" prot="public">
    <compoundname>pma::ScopedPtr</compoundname>
    <basecompoundref prot="private" virt="non-virtual">typename DefaultInstanceDestroyer::type</basecompoundref>
    <includes refid="ScopedPtr_8h" local="no">ScopedPtr.h</includes>
    <innerclass refid="structpma_1_1ScopedPtr_1_1inspect" prot="private">pma::ScopedPtr::inspect</innerclass>
    <innerclass refid="structpma_1_1ScopedPtr_1_1inspect_3_01U_0f_0e_4" prot="private">pma::ScopedPtr::inspect&lt; U[]&gt;</innerclass>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
      <param>
        <type>class TDestroyer</type>
        <defval>typename <ref refid="structpma_1_1DefaultInstanceDestroyer" kindref="compound">DefaultInstanceDestroyer</ref>&lt;T&gt;::type</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classpma_1_1ScopedPtr_1a2cb86e04e9f54957b972a4a16bf7db00" prot="public" static="no">
        <type>typename <ref refid="structpma_1_1ScopedPtr_1_1inspect" kindref="compound">inspect</ref>&lt; T &gt;::pointer_type</type>
        <definition>using pma::ScopedPtr&lt; T, TDestroyer &gt;::pointer =  typename inspect&lt;T&gt;::pointer_type</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <qualifiedname>pma::ScopedPtr::pointer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" line="133" column="9" bodyfile="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classpma_1_1ScopedPtr_1a83af2259fff86f3d2e3ec35b2b5aa1e0" prot="public" static="no">
        <type>typename <ref refid="structpma_1_1ScopedPtr_1_1inspect" kindref="compound">inspect</ref>&lt; T &gt;::element_type</type>
        <definition>using pma::ScopedPtr&lt; T, TDestroyer &gt;::element_type =  typename inspect&lt;T&gt;::element_type</definition>
        <argsstring></argsstring>
        <name>element_type</name>
        <qualifiedname>pma::ScopedPtr::element_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" line="134" column="9" bodyfile="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classpma_1_1ScopedPtr_1a1597e9b99b3b6603408019b3ec499c24" prot="public" static="no">
        <type>TDestroyer</type>
        <definition>using pma::ScopedPtr&lt; T, TDestroyer &gt;::destroyer_type =  TDestroyer</definition>
        <argsstring></argsstring>
        <name>destroyer_type</name>
        <qualifiedname>pma::ScopedPtr::destroyer_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" line="135" column="9" bodyfile="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classpma_1_1ScopedPtr_1ad7a0c2d2fe0645e486fd69448787efc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>class UDestroyer</type>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class ScopedPtr</definition>
        <argsstring></argsstring>
        <name>ScopedPtr</name>
        <qualifiedname>pma::ScopedPtr::ScopedPtr</qualifiedname>
        <param>
          <type><ref refid="classpma_1_1ScopedPtr" kindref="compound">ScopedPtr</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" line="138" column="22" bodyfile="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classpma_1_1ScopedPtr_1a5ceb3522644f71462c6131ecc248228d" prot="private" static="no" mutable="no">
        <type><ref refid="classpma_1_1ScopedPtr_1a2cb86e04e9f54957b972a4a16bf7db00" kindref="member">pointer</ref></type>
        <definition>pointer pma::ScopedPtr&lt; T, TDestroyer &gt;::ptr</definition>
        <argsstring></argsstring>
        <name>ptr</name>
        <qualifiedname>pma::ScopedPtr::ptr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" line="232" column="17" bodyfile="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" bodystart="232" bodyend="-1"/>
        <referencedby refid="classpma_1_1ScopedPtr_1a31d55fe3140cc2ba79a521e20b1b51cf" compoundref="ScopedPtr_8h" startline="208" endline="210">pma::ScopedPtr&lt; T, TDestroyer &gt;::get</referencedby>
        <referencedby refid="classpma_1_1ScopedPtr_1a63ffd83e8de52b12fb81008df024dfa2" compoundref="ScopedPtr_8h" startline="204" endline="206">pma::ScopedPtr&lt; T, TDestroyer &gt;::operator bool</referencedby>
        <referencedby refid="classpma_1_1ScopedPtr_1af2b15934db75caa3ccca89ed57705269" compoundref="ScopedPtr_8h" startline="196" endline="198">pma::ScopedPtr&lt; T, TDestroyer &gt;::operator*</referencedby>
        <referencedby refid="classpma_1_1ScopedPtr_1a23a87ac7001d08ff238dddd00159a278" compoundref="ScopedPtr_8h" startline="200" endline="202">pma::ScopedPtr&lt; T, TDestroyer &gt;::operator-&gt;</referencedby>
        <referencedby refid="classpma_1_1ScopedPtr_1a0741a90a3daa0571c5420e6e3a32c61c" compoundref="ScopedPtr_8h" startline="191" endline="193">pma::ScopedPtr&lt; T, TDestroyer &gt;::operator[]</referencedby>
        <referencedby refid="classpma_1_1ScopedPtr_1ab73c30167b7f884a639b520308d8dcb5" compoundref="ScopedPtr_8h" startline="212" endline="216">pma::ScopedPtr&lt; T, TDestroyer &gt;::release</referencedby>
        <referencedby refid="classpma_1_1ScopedPtr_1aa750521aec166786408e47968f84a55b" compoundref="ScopedPtr_8h" startline="218" endline="224">pma::ScopedPtr&lt; T, TDestroyer &gt;::reset</referencedby>
        <referencedby refid="classpma_1_1ScopedPtr_1a447bbbfc9c8ec22c04dc933510016b6b" compoundref="ScopedPtr_8h" startline="226" endline="229">pma::ScopedPtr&lt; T, TDestroyer &gt;::swap</referencedby>
        <referencedby refid="classpma_1_1ScopedPtr_1a3897fb8c749466513e4d362c64aa60f4" compoundref="ScopedPtr_8h" startline="150" endline="155">pma::ScopedPtr&lt; T, TDestroyer &gt;::~ScopedPtr</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classpma_1_1ScopedPtr_1a0674d14b18df2c96eb3571726c105e3e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>pma::ScopedPtr&lt; T, TDestroyer &gt;::ScopedPtr</definition>
        <argsstring>()</argsstring>
        <name>ScopedPtr</name>
        <qualifiedname>pma::ScopedPtr::ScopedPtr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" line="141" column="9" bodyfile="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" bodystart="141" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classpma_1_1ScopedPtr_1ae7890da5ce12bd4b234231f92a708acf" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>pma::ScopedPtr&lt; T, TDestroyer &gt;::ScopedPtr</definition>
        <argsstring>(pointer ptr_)</argsstring>
        <name>ScopedPtr</name>
        <qualifiedname>pma::ScopedPtr::ScopedPtr</qualifiedname>
        <param>
          <type><ref refid="classpma_1_1ScopedPtr_1a2cb86e04e9f54957b972a4a16bf7db00" kindref="member">pointer</ref></type>
          <declname>ptr_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" line="144" column="18" bodyfile="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" bodystart="144" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="classpma_1_1ScopedPtr_1adaeed2ec20f00f446c3816ada04d0e87" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>pma::ScopedPtr&lt; T, TDestroyer &gt;::ScopedPtr</definition>
        <argsstring>(pointer ptr_, destroyer_type &amp;&amp;destroyer)</argsstring>
        <name>ScopedPtr</name>
        <qualifiedname>pma::ScopedPtr::ScopedPtr</qualifiedname>
        <param>
          <type><ref refid="classpma_1_1ScopedPtr_1a2cb86e04e9f54957b972a4a16bf7db00" kindref="member">pointer</ref></type>
          <declname>ptr_</declname>
        </param>
        <param>
          <type><ref refid="classpma_1_1ScopedPtr_1a1597e9b99b3b6603408019b3ec499c24" kindref="member">destroyer_type</ref> &amp;&amp;</type>
          <declname>destroyer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" line="147" column="9" bodyfile="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" bodystart="147" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classpma_1_1ScopedPtr_1a3897fb8c749466513e4d362c64aa60f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>pma::ScopedPtr&lt; T, TDestroyer &gt;::~ScopedPtr</definition>
        <argsstring>()</argsstring>
        <name>~ScopedPtr</name>
        <qualifiedname>pma::ScopedPtr::~ScopedPtr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" line="150" column="9" bodyfile="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" bodystart="150" bodyend="155"/>
        <references refid="classpma_1_1ScopedPtr_1a5ceb3522644f71462c6131ecc248228d" compoundref="ScopedPtr_8h" startline="232">pma::ScopedPtr&lt; T, TDestroyer &gt;::ptr</references>
      </memberdef>
      <memberdef kind="function" id="classpma_1_1ScopedPtr_1a80748b4d68ff271915fd315e0cedf5eb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>pma::ScopedPtr&lt; T, TDestroyer &gt;::ScopedPtr</definition>
        <argsstring>(std::nullptr_t)</argsstring>
        <name>ScopedPtr</name>
        <qualifiedname>pma::ScopedPtr::ScopedPtr</qualifiedname>
        <param>
          <type>std::nullptr_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" line="157" column="9" bodyfile="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" bodystart="157" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="classpma_1_1ScopedPtr_1a8fdc1264bae639901db043b6ea5bc909" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classpma_1_1ScopedPtr" kindref="compound">ScopedPtr</ref> &amp;</type>
        <definition>ScopedPtr &amp; pma::ScopedPtr&lt; T, TDestroyer &gt;::operator=</definition>
        <argsstring>(std::nullptr_t)</argsstring>
        <name>operator=</name>
        <qualifiedname>pma::ScopedPtr::operator=</qualifiedname>
        <param>
          <type>std::nullptr_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" line="160" column="19" bodyfile="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" bodystart="160" bodyend="163"/>
        <references refid="classpma_1_1ScopedPtr_1aa750521aec166786408e47968f84a55b" compoundref="ScopedPtr_8h" startline="218" endline="224">pma::ScopedPtr&lt; T, TDestroyer &gt;::reset</references>
      </memberdef>
      <memberdef kind="function" id="classpma_1_1ScopedPtr_1ad3149c1e95c611d0fa47fdfce6b7f5b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>pma::ScopedPtr&lt; T, TDestroyer &gt;::ScopedPtr</definition>
        <argsstring>(const ScopedPtr &amp;)=delete</argsstring>
        <name>ScopedPtr</name>
        <qualifiedname>pma::ScopedPtr::ScopedPtr</qualifiedname>
        <param>
          <type>const <ref refid="classpma_1_1ScopedPtr" kindref="compound">ScopedPtr</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" line="165" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classpma_1_1ScopedPtr_1a58c652176e44bab898cf013b34aca15c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpma_1_1ScopedPtr" kindref="compound">ScopedPtr</ref> &amp;</type>
        <definition>ScopedPtr &amp; pma::ScopedPtr&lt; T, TDestroyer &gt;::operator=</definition>
        <argsstring>(const ScopedPtr &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>pma::ScopedPtr::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classpma_1_1ScopedPtr" kindref="compound">ScopedPtr</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" line="166" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classpma_1_1ScopedPtr_1ae769ada6bcf5d0ff8ed4f615eb7b90af" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>pma::ScopedPtr&lt; T, TDestroyer &gt;::ScopedPtr</definition>
        <argsstring>(ScopedPtr &amp;&amp;rhs) noexcept</argsstring>
        <name>ScopedPtr</name>
        <qualifiedname>pma::ScopedPtr::ScopedPtr</qualifiedname>
        <param>
          <type><ref refid="classpma_1_1ScopedPtr" kindref="compound">ScopedPtr</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" line="168" column="9" bodyfile="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" bodystart="168" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classpma_1_1ScopedPtr_1a146b5a34330ca6a22ab676365df343c0" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classpma_1_1ScopedPtr" kindref="compound">ScopedPtr</ref> &amp;</type>
        <definition>ScopedPtr &amp; pma::ScopedPtr&lt; T, TDestroyer &gt;::operator=</definition>
        <argsstring>(ScopedPtr &amp;&amp;rhs) noexcept</argsstring>
        <name>operator=</name>
        <qualifiedname>pma::ScopedPtr::operator=</qualifiedname>
        <param>
          <type><ref refid="classpma_1_1ScopedPtr" kindref="compound">ScopedPtr</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" line="172" column="19" bodyfile="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" bodystart="172" bodyend="175"/>
        <references refid="classpma_1_1ScopedPtr_1a447bbbfc9c8ec22c04dc933510016b6b" compoundref="ScopedPtr_8h" startline="226" endline="229">pma::ScopedPtr&lt; T, TDestroyer &gt;::swap</references>
      </memberdef>
      <memberdef kind="function" id="classpma_1_1ScopedPtr_1af7d6b2059c1838fe67310e85df8c1ba3" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>class UDestroyer</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>pma::ScopedPtr&lt; T, TDestroyer &gt;::ScopedPtr</definition>
        <argsstring>(ScopedPtr&lt; U, UDestroyer &gt; &amp;&amp;rhs) noexcept</argsstring>
        <name>ScopedPtr</name>
        <qualifiedname>pma::ScopedPtr::ScopedPtr</qualifiedname>
        <param>
          <type><ref refid="classpma_1_1ScopedPtr" kindref="compound">ScopedPtr</ref>&lt; U, UDestroyer &gt; &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" line="178" column="9" bodyfile="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" bodystart="178" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classpma_1_1ScopedPtr_1abbb7e68a6f1859b4d18456654d47920e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>class UDestroyer</type>
          </param>
        </templateparamlist>
        <type><ref refid="classpma_1_1ScopedPtr" kindref="compound">ScopedPtr</ref> &amp;</type>
        <definition>ScopedPtr &amp; pma::ScopedPtr&lt; T, TDestroyer &gt;::operator=</definition>
        <argsstring>(ScopedPtr&lt; U, UDestroyer &gt; &amp;&amp;rhs) noexcept</argsstring>
        <name>operator=</name>
        <qualifiedname>pma::ScopedPtr::operator=</qualifiedname>
        <param>
          <type><ref refid="classpma_1_1ScopedPtr" kindref="compound">ScopedPtr</ref>&lt; U, UDestroyer &gt; &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" line="184" column="19" bodyfile="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" bodystart="184" bodyend="188"/>
        <references refid="classpma_1_1ScopedPtr_1ab73c30167b7f884a639b520308d8dcb5" compoundref="ScopedPtr_8h" startline="212" endline="216">pma::ScopedPtr&lt; T, TDestroyer &gt;::release</references>
      </memberdef>
      <memberdef kind="function" id="classpma_1_1ScopedPtr_1a0741a90a3daa0571c5420e6e3a32c61c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>typename IA</type>
            <defval>typename <ref refid="structpma_1_1ScopedPtr_1_1inspect" kindref="compound">inspect</ref>&lt;U&gt;::is_array</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; IA::value, <ref refid="classpma_1_1ScopedPtr_1a83af2259fff86f3d2e3ec35b2b5aa1e0" kindref="member">element_type</ref> &amp; &gt;::type</type>
        <definition>std::enable_if&lt; IA::value, element_type &amp; &gt;::type pma::ScopedPtr&lt; T, TDestroyer &gt;::operator[]</definition>
        <argsstring>(std::size_t index) const noexcept</argsstring>
        <name>operator[]</name>
        <qualifiedname>pma::ScopedPtr::operator[]</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" line="191" column="40" bodyfile="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" bodystart="191" bodyend="193"/>
        <references refid="classpma_1_1ScopedPtr_1a5ceb3522644f71462c6131ecc248228d" compoundref="ScopedPtr_8h" startline="232">pma::ScopedPtr&lt; T, TDestroyer &gt;::ptr</references>
      </memberdef>
      <memberdef kind="function" id="classpma_1_1ScopedPtr_1af2b15934db75caa3ccca89ed57705269" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>typename IA</type>
            <defval>typename <ref refid="structpma_1_1ScopedPtr_1_1inspect" kindref="compound">inspect</ref>&lt;U&gt;::is_array</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt;!IA::value, <ref refid="classpma_1_1ScopedPtr_1a83af2259fff86f3d2e3ec35b2b5aa1e0" kindref="member">element_type</ref> &amp; &gt;::type</type>
        <definition>std::enable_if&lt;!IA::value, element_type &amp; &gt;::type pma::ScopedPtr&lt; T, TDestroyer &gt;::operator*</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator*</name>
        <qualifiedname>pma::ScopedPtr::operator*</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" line="196" column="40" bodyfile="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" bodystart="196" bodyend="198"/>
        <references refid="classpma_1_1ScopedPtr_1a5ceb3522644f71462c6131ecc248228d" compoundref="ScopedPtr_8h" startline="232">pma::ScopedPtr&lt; T, TDestroyer &gt;::ptr</references>
      </memberdef>
      <memberdef kind="function" id="classpma_1_1ScopedPtr_1a23a87ac7001d08ff238dddd00159a278" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classpma_1_1ScopedPtr_1a2cb86e04e9f54957b972a4a16bf7db00" kindref="member">pointer</ref></type>
        <definition>pointer pma::ScopedPtr&lt; T, TDestroyer &gt;::operator-&gt;</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator-&gt;</name>
        <qualifiedname>pma::ScopedPtr::operator-&gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" line="200" column="17" bodyfile="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" bodystart="200" bodyend="202"/>
        <references refid="classpma_1_1ScopedPtr_1a5ceb3522644f71462c6131ecc248228d" compoundref="ScopedPtr_8h" startline="232">pma::ScopedPtr&lt; T, TDestroyer &gt;::ptr</references>
      </memberdef>
      <memberdef kind="function" id="classpma_1_1ScopedPtr_1a63ffd83e8de52b12fb81008df024dfa2" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>pma::ScopedPtr&lt; T, TDestroyer &gt;::operator bool</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator bool</name>
        <qualifiedname>pma::ScopedPtr::operator bool</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" line="204" column="9" bodyfile="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" bodystart="204" bodyend="206"/>
        <references refid="classpma_1_1ScopedPtr_1a5ceb3522644f71462c6131ecc248228d" compoundref="ScopedPtr_8h" startline="232">pma::ScopedPtr&lt; T, TDestroyer &gt;::ptr</references>
      </memberdef>
      <memberdef kind="function" id="classpma_1_1ScopedPtr_1a31d55fe3140cc2ba79a521e20b1b51cf" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classpma_1_1ScopedPtr_1a2cb86e04e9f54957b972a4a16bf7db00" kindref="member">pointer</ref></type>
        <definition>pointer pma::ScopedPtr&lt; T, TDestroyer &gt;::get</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get</name>
        <qualifiedname>pma::ScopedPtr::get</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" line="208" column="17" bodyfile="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" bodystart="208" bodyend="210"/>
        <references refid="classpma_1_1ScopedPtr_1a5ceb3522644f71462c6131ecc248228d" compoundref="ScopedPtr_8h" startline="232">pma::ScopedPtr&lt; T, TDestroyer &gt;::ptr</references>
      </memberdef>
      <memberdef kind="function" id="classpma_1_1ScopedPtr_1ab73c30167b7f884a639b520308d8dcb5" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classpma_1_1ScopedPtr_1a2cb86e04e9f54957b972a4a16bf7db00" kindref="member">pointer</ref></type>
        <definition>pointer pma::ScopedPtr&lt; T, TDestroyer &gt;::release</definition>
        <argsstring>() noexcept</argsstring>
        <name>release</name>
        <qualifiedname>pma::ScopedPtr::release</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" line="212" column="17" bodyfile="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" bodystart="212" bodyend="216"/>
        <references refid="classpma_1_1ScopedPtr_1a5ceb3522644f71462c6131ecc248228d" compoundref="ScopedPtr_8h" startline="232">pma::ScopedPtr&lt; T, TDestroyer &gt;::ptr</references>
        <referencedby refid="classpma_1_1ScopedPtr_1abbb7e68a6f1859b4d18456654d47920e" compoundref="ScopedPtr_8h" startline="184" endline="188">pma::ScopedPtr&lt; T, TDestroyer &gt;::operator=</referencedby>
        <referencedby refid="classpma_1_1ScopedPtr_1aa750521aec166786408e47968f84a55b" compoundref="ScopedPtr_8h" startline="218" endline="224">pma::ScopedPtr&lt; T, TDestroyer &gt;::reset</referencedby>
      </memberdef>
      <memberdef kind="function" id="classpma_1_1ScopedPtr_1aa750521aec166786408e47968f84a55b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pma::ScopedPtr&lt; T, TDestroyer &gt;::reset</definition>
        <argsstring>(pointer rhs=pointer()) noexcept</argsstring>
        <name>reset</name>
        <qualifiedname>pma::ScopedPtr::reset</qualifiedname>
        <param>
          <type><ref refid="classpma_1_1ScopedPtr_1a2cb86e04e9f54957b972a4a16bf7db00" kindref="member">pointer</ref></type>
          <declname>rhs</declname>
          <defval><ref refid="classpma_1_1ScopedPtr_1a2cb86e04e9f54957b972a4a16bf7db00" kindref="member">pointer</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" line="218" column="14" bodyfile="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" bodystart="218" bodyend="224"/>
        <references refid="classpma_1_1ScopedPtr_1a5ceb3522644f71462c6131ecc248228d" compoundref="ScopedPtr_8h" startline="232">pma::ScopedPtr&lt; T, TDestroyer &gt;::ptr</references>
        <references refid="classpma_1_1ScopedPtr_1ab73c30167b7f884a639b520308d8dcb5" compoundref="ScopedPtr_8h" startline="212" endline="216">pma::ScopedPtr&lt; T, TDestroyer &gt;::release</references>
        <referencedby refid="classpma_1_1ScopedPtr_1a8fdc1264bae639901db043b6ea5bc909" compoundref="ScopedPtr_8h" startline="160" endline="163">pma::ScopedPtr&lt; T, TDestroyer &gt;::operator=</referencedby>
      </memberdef>
      <memberdef kind="function" id="classpma_1_1ScopedPtr_1a447bbbfc9c8ec22c04dc933510016b6b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pma::ScopedPtr&lt; T, TDestroyer &gt;::swap</definition>
        <argsstring>(ScopedPtr &amp;rhs) noexcept</argsstring>
        <name>swap</name>
        <qualifiedname>pma::ScopedPtr::swap</qualifiedname>
        <param>
          <type><ref refid="classpma_1_1ScopedPtr" kindref="compound">ScopedPtr</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" line="226" column="14" bodyfile="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" bodystart="226" bodyend="229"/>
        <references refid="classpma_1_1ScopedPtr_1a5ceb3522644f71462c6131ecc248228d" compoundref="ScopedPtr_8h" startline="232">pma::ScopedPtr&lt; T, TDestroyer &gt;::ptr</references>
        <referencedby refid="classpma_1_1ScopedPtr_1a146b5a34330ca6a22ab676365df343c0" compoundref="ScopedPtr_8h" startline="172" endline="175">pma::ScopedPtr&lt; T, TDestroyer &gt;::operator=</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Takes ownership over the given pointer and handles it&apos;s lifetime. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>As <ref refid="classpma_1_1ScopedPtr" kindref="compound">ScopedPtr</ref> inherits the specified destroyer type, stateless lifetime managers are zero-cost, but it&apos;s also possible to use stateful lifetime managers (such as lambdas with captures and what-not). For stateful lifetime managers, a dedicated constructor exists that receives the destroyer instance and initializes the inherited destroyer type with it. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="namespacepma_1a64805040921b916b618da85c7b1b52b6" kindref="member">makeScoped</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="structpma_1_1New" kindref="compound">New</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="structpma_1_1Delete" kindref="compound">Delete</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="structpma_1_1FactoryCreate" kindref="compound">FactoryCreate</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="structpma_1_1FactoryDestroy" kindref="compound">FactoryDestroy</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="structpma_1_1DefaultInstanceCreator" kindref="compound">DefaultInstanceCreator</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="structpma_1_1DefaultInstanceDestroyer" kindref="compound">DefaultInstanceDestroyer</ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>pma::ScopedPtr&lt; dnac::CalculateMeshLowerLODsCommand::Impl &gt;</label>
        <link refid="classpma_1_1ScopedPtr"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; dnac::CalculateMeshLowerLODsCommand::Impl &gt;</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>pma::ScopedPtr&lt; dnac::ClearBlendShapesCommand::Impl &gt;</label>
        <link refid="classpma_1_1ScopedPtr"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; dnac::ClearBlendShapesCommand::Impl &gt;</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>pma::ScopedPtr&lt; dnac::CommandSequence::Impl &gt;</label>
        <link refid="classpma_1_1ScopedPtr"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; dnac::CommandSequence::Impl &gt;</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>pma::ScopedPtr&lt; dnac::PruneBlendShapeTargetsCommand::Impl &gt;</label>
        <link refid="classpma_1_1ScopedPtr"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; dnac::PruneBlendShapeTargetsCommand::Impl &gt;</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>pma::ScopedPtr&lt; dnac::RemoveJointAnimationCommand::Impl &gt;</label>
        <link refid="classpma_1_1ScopedPtr"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; dnac::RemoveJointAnimationCommand::Impl &gt;</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>pma::ScopedPtr&lt; dnac::RemoveJointCommand::Impl &gt;</label>
        <link refid="classpma_1_1ScopedPtr"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; dnac::RemoveJointCommand::Impl &gt;</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>pma::ScopedPtr&lt; dnac::RemoveMeshCommand::Impl &gt;</label>
        <link refid="classpma_1_1ScopedPtr"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; dnac::RemoveMeshCommand::Impl &gt;</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>pma::ScopedPtr&lt; dnac::RenameAnimatedMapCommand::Impl &gt;</label>
        <link refid="classpma_1_1ScopedPtr"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; dnac::RenameAnimatedMapCommand::Impl &gt;</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>pma::ScopedPtr&lt; dnac::RenameBlendShapeCommand::Impl &gt;</label>
        <link refid="classpma_1_1ScopedPtr"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; dnac::RenameBlendShapeCommand::Impl &gt;</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>pma::ScopedPtr&lt; dnac::RenameJointCommand::Impl &gt;</label>
        <link refid="classpma_1_1ScopedPtr"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; dnac::RenameJointCommand::Impl &gt;</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>pma::ScopedPtr&lt; dnac::RenameMeshCommand::Impl &gt;</label>
        <link refid="classpma_1_1ScopedPtr"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; dnac::RenameMeshCommand::Impl &gt;</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>pma::ScopedPtr&lt; dnac::RotateCommand::Impl &gt;</label>
        <link refid="classpma_1_1ScopedPtr"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; dnac::RotateCommand::Impl &gt;</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>pma::ScopedPtr&lt; dnac::ScaleCommand::Impl &gt;</label>
        <link refid="classpma_1_1ScopedPtr"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; dnac::ScaleCommand::Impl &gt;</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>pma::ScopedPtr&lt; dnac::SetBlendShapeTargetDeltasCommand::Impl &gt;</label>
        <link refid="classpma_1_1ScopedPtr"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; dnac::SetBlendShapeTargetDeltasCommand::Impl &gt;</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>pma::ScopedPtr&lt; dnac::SetLODsCommand::Impl &gt;</label>
        <link refid="classpma_1_1ScopedPtr"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; dnac::SetLODsCommand::Impl &gt;</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>pma::ScopedPtr&lt; dnac::SetNeutralJointRotationsCommand::Impl &gt;</label>
        <link refid="classpma_1_1ScopedPtr"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; dnac::SetNeutralJointRotationsCommand::Impl &gt;</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>pma::ScopedPtr&lt; dnac::SetNeutralJointTranslationsCommand::Impl &gt;</label>
        <link refid="classpma_1_1ScopedPtr"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; dnac::SetNeutralJointTranslationsCommand::Impl &gt;</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>pma::ScopedPtr&lt; dnac::SetSkinWeightsCommand::Impl &gt;</label>
        <link refid="classpma_1_1ScopedPtr"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; dnac::SetSkinWeightsCommand::Impl &gt;</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>pma::ScopedPtr&lt; dnac::SetVertexPositionsCommand::Impl &gt;</label>
        <link refid="classpma_1_1ScopedPtr"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; dnac::SetVertexPositionsCommand::Impl &gt;</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>pma::ScopedPtr&lt; dnac::TranslateCommand::Impl &gt;</label>
        <link refid="classpma_1_1ScopedPtr"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; dnac::TranslateCommand::Impl &gt;</edgelabel>
        </childnode>
      </node>
      <node id="23">
        <label>pma::ScopedPtr&lt; pma::ArenaMemoryResource::Impl, pma::FactoryDestroy&lt; pma::ArenaMemoryResource::Impl &gt; &gt;</label>
        <link refid="classpma_1_1ScopedPtr"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; pma::ArenaMemoryResource::Impl, pma::FactoryDestroy&lt; pma::ArenaMemoryResource::Impl &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>pma::ScopedPtr&lt; trio::FileStream &gt;</label>
        <link refid="classpma_1_1ScopedPtr"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; trio::FileStream &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>pma::ScopedPtr&lt; T, TDestroyer &gt;</label>
        <link refid="classpma_1_1ScopedPtr"/>
        <childnode refid="2" relation="private-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>typename DefaultInstanceDestroyer&lt;T&gt;::type</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>pma::ScopedPtr&lt; T, TDestroyer &gt;::inspect&lt; T &gt;</label>
        <link refid="structpma_1_1ScopedPtr_1_1inspect"/>
        <childnode refid="4" relation="template-instance">
          <edgelabel>&lt; T &gt;</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>pma::ScopedPtr&lt; T, TDestroyer &gt;::inspect&lt; U &gt;</label>
        <link refid="structpma_1_1ScopedPtr_1_1inspect"/>
      </node>
      <node id="1">
        <label>pma::ScopedPtr&lt; T, TDestroyer &gt;</label>
        <link refid="classpma_1_1ScopedPtr"/>
        <childnode refid="2" relation="private-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>-ptr</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>typename DefaultInstanceDestroyer&lt;T&gt;::type</label>
      </node>
    </collaborationgraph>
    <location file="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" line="116" column="1" bodyfile="C:/source/MetaHuman-DNA-Calibration_clean/dnacalib/DNACalib/include/pma/ScopedPtr.h" bodystart="116" bodyend="233"/>
    <listofallmembers>
      <member refid="classpma_1_1ScopedPtr_1a1597e9b99b3b6603408019b3ec499c24" prot="public" virt="non-virtual"><scope>pma::ScopedPtr</scope><name>destroyer_type</name></member>
      <member refid="classpma_1_1ScopedPtr_1a83af2259fff86f3d2e3ec35b2b5aa1e0" prot="public" virt="non-virtual"><scope>pma::ScopedPtr</scope><name>element_type</name></member>
      <member refid="classpma_1_1ScopedPtr_1a31d55fe3140cc2ba79a521e20b1b51cf" prot="public" virt="non-virtual"><scope>pma::ScopedPtr</scope><name>get</name></member>
      <member refid="classpma_1_1ScopedPtr_1a63ffd83e8de52b12fb81008df024dfa2" prot="public" virt="non-virtual"><scope>pma::ScopedPtr</scope><name>operator bool</name></member>
      <member refid="classpma_1_1ScopedPtr_1af2b15934db75caa3ccca89ed57705269" prot="public" virt="non-virtual"><scope>pma::ScopedPtr</scope><name>operator*</name></member>
      <member refid="classpma_1_1ScopedPtr_1a23a87ac7001d08ff238dddd00159a278" prot="public" virt="non-virtual"><scope>pma::ScopedPtr</scope><name>operator-&gt;</name></member>
      <member refid="classpma_1_1ScopedPtr_1a8fdc1264bae639901db043b6ea5bc909" prot="public" virt="non-virtual"><scope>pma::ScopedPtr</scope><name>operator=</name></member>
      <member refid="classpma_1_1ScopedPtr_1a58c652176e44bab898cf013b34aca15c" prot="public" virt="non-virtual"><scope>pma::ScopedPtr</scope><name>operator=</name></member>
      <member refid="classpma_1_1ScopedPtr_1a146b5a34330ca6a22ab676365df343c0" prot="public" virt="non-virtual"><scope>pma::ScopedPtr</scope><name>operator=</name></member>
      <member refid="classpma_1_1ScopedPtr_1abbb7e68a6f1859b4d18456654d47920e" prot="public" virt="non-virtual"><scope>pma::ScopedPtr</scope><name>operator=</name></member>
      <member refid="classpma_1_1ScopedPtr_1a0741a90a3daa0571c5420e6e3a32c61c" prot="public" virt="non-virtual"><scope>pma::ScopedPtr</scope><name>operator[]</name></member>
      <member refid="classpma_1_1ScopedPtr_1a2cb86e04e9f54957b972a4a16bf7db00" prot="public" virt="non-virtual"><scope>pma::ScopedPtr</scope><name>pointer</name></member>
      <member refid="classpma_1_1ScopedPtr_1a5ceb3522644f71462c6131ecc248228d" prot="private" virt="non-virtual"><scope>pma::ScopedPtr</scope><name>ptr</name></member>
      <member refid="classpma_1_1ScopedPtr_1ab73c30167b7f884a639b520308d8dcb5" prot="public" virt="non-virtual"><scope>pma::ScopedPtr</scope><name>release</name></member>
      <member refid="classpma_1_1ScopedPtr_1aa750521aec166786408e47968f84a55b" prot="public" virt="non-virtual"><scope>pma::ScopedPtr</scope><name>reset</name></member>
      <member refid="classpma_1_1ScopedPtr_1ad7a0c2d2fe0645e486fd69448787efc8" prot="public" virt="non-virtual"><scope>pma::ScopedPtr</scope><name>ScopedPtr</name></member>
      <member refid="classpma_1_1ScopedPtr_1a0674d14b18df2c96eb3571726c105e3e" prot="public" virt="non-virtual"><scope>pma::ScopedPtr</scope><name>ScopedPtr</name></member>
      <member refid="classpma_1_1ScopedPtr_1ae7890da5ce12bd4b234231f92a708acf" prot="public" virt="non-virtual"><scope>pma::ScopedPtr</scope><name>ScopedPtr</name></member>
      <member refid="classpma_1_1ScopedPtr_1adaeed2ec20f00f446c3816ada04d0e87" prot="public" virt="non-virtual"><scope>pma::ScopedPtr</scope><name>ScopedPtr</name></member>
      <member refid="classpma_1_1ScopedPtr_1a80748b4d68ff271915fd315e0cedf5eb" prot="public" virt="non-virtual"><scope>pma::ScopedPtr</scope><name>ScopedPtr</name></member>
      <member refid="classpma_1_1ScopedPtr_1ad3149c1e95c611d0fa47fdfce6b7f5b7" prot="public" virt="non-virtual"><scope>pma::ScopedPtr</scope><name>ScopedPtr</name></member>
      <member refid="classpma_1_1ScopedPtr_1ae769ada6bcf5d0ff8ed4f615eb7b90af" prot="public" virt="non-virtual"><scope>pma::ScopedPtr</scope><name>ScopedPtr</name></member>
      <member refid="classpma_1_1ScopedPtr_1af7d6b2059c1838fe67310e85df8c1ba3" prot="public" virt="non-virtual"><scope>pma::ScopedPtr</scope><name>ScopedPtr</name></member>
      <member refid="classpma_1_1ScopedPtr_1a447bbbfc9c8ec22c04dc933510016b6b" prot="public" virt="non-virtual"><scope>pma::ScopedPtr</scope><name>swap</name></member>
      <member refid="classpma_1_1ScopedPtr_1a3897fb8c749466513e4d362c64aa60f4" prot="public" virt="non-virtual"><scope>pma::ScopedPtr</scope><name>~ScopedPtr</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
