<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="classdnac_1_1ConditionalCommand" kind="class" language="C++" prot="public">
    <compoundname>dnac::ConditionalCommand</compoundname>
    <basecompoundref refid="classdnac_1_1Command" prot="public" virt="non-virtual">dnac::Command</basecompoundref>
    <includes refid="ConditionalCommand_8h" local="no">ConditionalCommand.h</includes>
    <templateparamlist>
      <param>
        <type>class TCommand</type>
      </param>
      <param>
        <type>class TCondition</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classdnac_1_1ConditionalCommand_1a0a174e09c26d68e2903ed8d7e61777be" prot="private" static="no">
        <type>TCommand</type>
        <definition>using dnac::ConditionalCommand&lt; TCommand, TCondition &gt;::CommandType =  TCommand</definition>
        <argsstring></argsstring>
        <name>CommandType</name>
        <qualifiedname>dnac::ConditionalCommand::CommandType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/include/dnacalib/commands/ConditionalCommand.h" line="17" column="9" bodyfile="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/include/dnacalib/commands/ConditionalCommand.h" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classdnac_1_1ConditionalCommand_1a2df2f70adaf901979e794e8908fa8fb6" prot="private" static="no">
        <type>TCondition</type>
        <definition>using dnac::ConditionalCommand&lt; TCommand, TCondition &gt;::ConditionType =  TCondition</definition>
        <argsstring></argsstring>
        <name>ConditionType</name>
        <qualifiedname>dnac::ConditionalCommand::ConditionType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/include/dnacalib/commands/ConditionalCommand.h" line="18" column="9" bodyfile="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/include/dnacalib/commands/ConditionalCommand.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classdnac_1_1ConditionalCommand_1ac3d7686824c816df5b174f0ed501e20d" prot="private" static="no" mutable="no">
        <type><ref refid="classdnac_1_1ConditionalCommand_1a0a174e09c26d68e2903ed8d7e61777be" kindref="member">CommandType</ref> *</type>
        <definition>CommandType* dnac::ConditionalCommand&lt; TCommand, TCondition &gt;::command</definition>
        <argsstring></argsstring>
        <name>command</name>
        <qualifiedname>dnac::ConditionalCommand::command</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/include/dnacalib/commands/ConditionalCommand.h" line="64" column="21" bodyfile="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/include/dnacalib/commands/ConditionalCommand.h" bodystart="64" bodyend="-1"/>
        <referencedby refid="classdnac_1_1ConditionalCommand_1aeffefec94ab5bad0780992b3240e59af" compoundref="ConditionalCommand_8h" startline="57" endline="61">dnac::ConditionalCommand&lt; TCommand, TCondition &gt;::run</referencedby>
        <referencedby refid="classdnac_1_1ConditionalCommand_1ac4f6fc29aa10707cd172e25f44f73586" compoundref="ConditionalCommand_8h" startline="44" endline="46">dnac::ConditionalCommand&lt; TCommand, TCondition &gt;::setCommand</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classdnac_1_1ConditionalCommand_1aa4c7fcbab3877d5ff0dc4f4258fac461" prot="private" static="no" mutable="no">
        <type><ref refid="classdnac_1_1ConditionalCommand_1a2df2f70adaf901979e794e8908fa8fb6" kindref="member">ConditionType</ref></type>
        <definition>ConditionType dnac::ConditionalCommand&lt; TCommand, TCondition &gt;::condition</definition>
        <argsstring></argsstring>
        <name>condition</name>
        <qualifiedname>dnac::ConditionalCommand::condition</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/include/dnacalib/commands/ConditionalCommand.h" line="65" column="23" bodyfile="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/include/dnacalib/commands/ConditionalCommand.h" bodystart="65" bodyend="-1"/>
        <referencedby refid="classdnac_1_1ConditionalCommand_1aeffefec94ab5bad0780992b3240e59af" compoundref="ConditionalCommand_8h" startline="57" endline="61">dnac::ConditionalCommand&lt; TCommand, TCondition &gt;::run</referencedby>
        <referencedby refid="classdnac_1_1ConditionalCommand_1a6e54cbc8d2130e2334c25bf2dda737b7" compoundref="ConditionalCommand_8h" startline="53" endline="55">dnac::ConditionalCommand&lt; TCommand, TCondition &gt;::setCondition</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdnac_1_1ConditionalCommand_1ad2119e90f088ffb7ffe1c493128a681f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>dnac::ConditionalCommand&lt; TCommand, TCondition &gt;::ConditionalCommand</definition>
        <argsstring>()</argsstring>
        <name>ConditionalCommand</name>
        <qualifiedname>dnac::ConditionalCommand::ConditionalCommand</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/include/dnacalib/commands/ConditionalCommand.h" line="21" column="9" bodyfile="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/include/dnacalib/commands/ConditionalCommand.h" bodystart="21" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="classdnac_1_1ConditionalCommand_1a5b68e4bdeb69709ecae44e67c802e9ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>dnac::ConditionalCommand&lt; TCommand, TCondition &gt;::ConditionalCommand</definition>
        <argsstring>(CommandType *command_, ConditionType condition_)</argsstring>
        <name>ConditionalCommand</name>
        <qualifiedname>dnac::ConditionalCommand::ConditionalCommand</qualifiedname>
        <param>
          <type><ref refid="classdnac_1_1ConditionalCommand_1a0a174e09c26d68e2903ed8d7e61777be" kindref="member">CommandType</ref> *</type>
          <declname>command_</declname>
        </param>
        <param>
          <type><ref refid="classdnac_1_1ConditionalCommand_1a2df2f70adaf901979e794e8908fa8fb6" kindref="member">ConditionType</ref></type>
          <declname>condition_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/include/dnacalib/commands/ConditionalCommand.h" line="26" column="9" bodyfile="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/include/dnacalib/commands/ConditionalCommand.h" bodystart="26" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classdnac_1_1ConditionalCommand_1a99b854e3904de1e26245d8d811b9e697" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dnac::ConditionalCommand&lt; TCommand, TCondition &gt;::~ConditionalCommand</definition>
        <argsstring>()=default</argsstring>
        <name>~ConditionalCommand</name>
        <qualifiedname>dnac::ConditionalCommand::~ConditionalCommand</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/include/dnacalib/commands/ConditionalCommand.h" line="31" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classdnac_1_1ConditionalCommand_1a61c5619dc7d7a5c9a0e07d4697dfb174" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dnac::ConditionalCommand&lt; TCommand, TCondition &gt;::ConditionalCommand</definition>
        <argsstring>(const ConditionalCommand &amp;)=delete</argsstring>
        <name>ConditionalCommand</name>
        <qualifiedname>dnac::ConditionalCommand::ConditionalCommand</qualifiedname>
        <param>
          <type>const <ref refid="classdnac_1_1ConditionalCommand" kindref="compound">ConditionalCommand</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/include/dnacalib/commands/ConditionalCommand.h" line="33" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classdnac_1_1ConditionalCommand_1aa2ce23f0a6a53121fd753cddc0fd6d28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdnac_1_1ConditionalCommand" kindref="compound">ConditionalCommand</ref> &amp;</type>
        <definition>ConditionalCommand &amp; dnac::ConditionalCommand&lt; TCommand, TCondition &gt;::operator=</definition>
        <argsstring>(const ConditionalCommand &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>dnac::ConditionalCommand::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classdnac_1_1ConditionalCommand" kindref="compound">ConditionalCommand</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/include/dnacalib/commands/ConditionalCommand.h" line="34" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classdnac_1_1ConditionalCommand_1addeddb4d16bf906965ade5ee3c49117b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dnac::ConditionalCommand&lt; TCommand, TCondition &gt;::ConditionalCommand</definition>
        <argsstring>(ConditionalCommand &amp;&amp;)=default</argsstring>
        <name>ConditionalCommand</name>
        <qualifiedname>dnac::ConditionalCommand::ConditionalCommand</qualifiedname>
        <param>
          <type><ref refid="classdnac_1_1ConditionalCommand" kindref="compound">ConditionalCommand</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/include/dnacalib/commands/ConditionalCommand.h" line="36" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classdnac_1_1ConditionalCommand_1ab29990c1be257ab79ad5fff5e0b5e2b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdnac_1_1ConditionalCommand" kindref="compound">ConditionalCommand</ref> &amp;</type>
        <definition>ConditionalCommand &amp; dnac::ConditionalCommand&lt; TCommand, TCondition &gt;::operator=</definition>
        <argsstring>(ConditionalCommand &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>dnac::ConditionalCommand::operator=</qualifiedname>
        <param>
          <type><ref refid="classdnac_1_1ConditionalCommand" kindref="compound">ConditionalCommand</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/include/dnacalib/commands/ConditionalCommand.h" line="37" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classdnac_1_1ConditionalCommand_1ac4f6fc29aa10707cd172e25f44f73586" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void dnac::ConditionalCommand&lt; TCommand, TCondition &gt;::setCommand</definition>
        <argsstring>(Command *command_)</argsstring>
        <name>setCommand</name>
        <qualifiedname>dnac::ConditionalCommand::setCommand</qualifiedname>
        <param>
          <type><ref refid="classdnac_1_1Command" kindref="compound">Command</ref> *</type>
          <declname>command_</declname>
        </param>
        <briefdescription>
<para>Method for setting the command to run. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command_</parametername>
</parameternamelist>
<parameterdescription>
<para>The command to run. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/include/dnacalib/commands/ConditionalCommand.h" line="44" column="14" bodyfile="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/include/dnacalib/commands/ConditionalCommand.h" bodystart="44" bodyend="46"/>
        <references refid="classdnac_1_1ConditionalCommand_1ac3d7686824c816df5b174f0ed501e20d" compoundref="ConditionalCommand_8h" startline="64">dnac::ConditionalCommand&lt; TCommand, TCondition &gt;::command</references>
      </memberdef>
      <memberdef kind="function" id="classdnac_1_1ConditionalCommand_1a6e54cbc8d2130e2334c25bf2dda737b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void dnac::ConditionalCommand&lt; TCommand, TCondition &gt;::setCondition</definition>
        <argsstring>(ConditionType condition_)</argsstring>
        <name>setCondition</name>
        <qualifiedname>dnac::ConditionalCommand::setCondition</qualifiedname>
        <param>
          <type><ref refid="classdnac_1_1ConditionalCommand_1a2df2f70adaf901979e794e8908fa8fb6" kindref="member">ConditionType</ref></type>
          <declname>condition_</declname>
        </param>
        <briefdescription>
<para>Method for setting the condition under which the command should run. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>condition_</parametername>
</parameternamelist>
<parameterdescription>
<para>The condition that should be met. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/include/dnacalib/commands/ConditionalCommand.h" line="53" column="14" bodyfile="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/include/dnacalib/commands/ConditionalCommand.h" bodystart="53" bodyend="55"/>
        <references refid="classdnac_1_1ConditionalCommand_1aa4c7fcbab3877d5ff0dc4f4258fac461" compoundref="ConditionalCommand_8h" startline="65">dnac::ConditionalCommand&lt; TCommand, TCondition &gt;::condition</references>
      </memberdef>
      <memberdef kind="function" id="classdnac_1_1ConditionalCommand_1aeffefec94ab5bad0780992b3240e59af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void dnac::ConditionalCommand&lt; TCommand, TCondition &gt;::run</definition>
        <argsstring>(DNACalibDNAReader *output) override</argsstring>
        <name>run</name>
        <qualifiedname>dnac::ConditionalCommand::run</qualifiedname>
        <reimplements refid="classdnac_1_1Command_1a204ca2536a334f4eb83c66e09ef3ecee">run</reimplements>
        <param>
          <type><ref refid="classdnac_1_1DNACalibDNAReader" kindref="compound">DNACalibDNAReader</ref> *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/include/dnacalib/commands/ConditionalCommand.h" line="57" column="14" bodyfile="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/include/dnacalib/commands/ConditionalCommand.h" bodystart="57" bodyend="61"/>
        <references refid="classdnac_1_1ConditionalCommand_1ac3d7686824c816df5b174f0ed501e20d" compoundref="ConditionalCommand_8h" startline="64">dnac::ConditionalCommand&lt; TCommand, TCondition &gt;::command</references>
        <references refid="classdnac_1_1ConditionalCommand_1aa4c7fcbab3877d5ff0dc4f4258fac461" compoundref="ConditionalCommand_8h" startline="65">dnac::ConditionalCommand&lt; TCommand, TCondition &gt;::condition</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classdnac_1_1ConditionalCommand" kindref="compound">ConditionalCommand</ref> is used to run a command if the specified condition is met. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>dnac::Command</label>
        <link refid="classdnac_1_1Command"/>
      </node>
      <node id="1">
        <label>dnac::ConditionalCommand&lt; TCommand, TCondition &gt;</label>
        <link refid="classdnac_1_1ConditionalCommand"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>dnac::Command</label>
        <link refid="classdnac_1_1Command"/>
      </node>
      <node id="1">
        <label>dnac::ConditionalCommand&lt; TCommand, TCondition &gt;</label>
        <link refid="classdnac_1_1ConditionalCommand"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/include/dnacalib/commands/ConditionalCommand.h" line="15" column="1" bodyfile="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/include/dnacalib/commands/ConditionalCommand.h" bodystart="15" bodyend="67"/>
    <listofallmembers>
      <member refid="classdnac_1_1ConditionalCommand_1ac3d7686824c816df5b174f0ed501e20d" prot="private" virt="non-virtual"><scope>dnac::ConditionalCommand</scope><name>command</name></member>
      <member refid="classdnac_1_1ConditionalCommand_1a0a174e09c26d68e2903ed8d7e61777be" prot="private" virt="non-virtual"><scope>dnac::ConditionalCommand</scope><name>CommandType</name></member>
      <member refid="classdnac_1_1ConditionalCommand_1aa4c7fcbab3877d5ff0dc4f4258fac461" prot="private" virt="non-virtual"><scope>dnac::ConditionalCommand</scope><name>condition</name></member>
      <member refid="classdnac_1_1ConditionalCommand_1ad2119e90f088ffb7ffe1c493128a681f" prot="public" virt="non-virtual"><scope>dnac::ConditionalCommand</scope><name>ConditionalCommand</name></member>
      <member refid="classdnac_1_1ConditionalCommand_1a5b68e4bdeb69709ecae44e67c802e9ab" prot="public" virt="non-virtual"><scope>dnac::ConditionalCommand</scope><name>ConditionalCommand</name></member>
      <member refid="classdnac_1_1ConditionalCommand_1a61c5619dc7d7a5c9a0e07d4697dfb174" prot="public" virt="non-virtual"><scope>dnac::ConditionalCommand</scope><name>ConditionalCommand</name></member>
      <member refid="classdnac_1_1ConditionalCommand_1addeddb4d16bf906965ade5ee3c49117b" prot="public" virt="non-virtual"><scope>dnac::ConditionalCommand</scope><name>ConditionalCommand</name></member>
      <member refid="classdnac_1_1ConditionalCommand_1a2df2f70adaf901979e794e8908fa8fb6" prot="private" virt="non-virtual"><scope>dnac::ConditionalCommand</scope><name>ConditionType</name></member>
      <member refid="classdnac_1_1ConditionalCommand_1aa2ce23f0a6a53121fd753cddc0fd6d28" prot="public" virt="non-virtual"><scope>dnac::ConditionalCommand</scope><name>operator=</name></member>
      <member refid="classdnac_1_1ConditionalCommand_1ab29990c1be257ab79ad5fff5e0b5e2b7" prot="public" virt="non-virtual"><scope>dnac::ConditionalCommand</scope><name>operator=</name></member>
      <member refid="classdnac_1_1ConditionalCommand_1aeffefec94ab5bad0780992b3240e59af" prot="public" virt="virtual"><scope>dnac::ConditionalCommand</scope><name>run</name></member>
      <member refid="classdnac_1_1ConditionalCommand_1ac4f6fc29aa10707cd172e25f44f73586" prot="public" virt="non-virtual"><scope>dnac::ConditionalCommand</scope><name>setCommand</name></member>
      <member refid="classdnac_1_1ConditionalCommand_1a6e54cbc8d2130e2334c25bf2dda737b7" prot="public" virt="non-virtual"><scope>dnac::ConditionalCommand</scope><name>setCondition</name></member>
      <member refid="classdnac_1_1Command_1a61be18c56cbef51019c8f7b1f752518c" prot="public" virt="virtual"><scope>dnac::ConditionalCommand</scope><name>~Command</name></member>
      <member refid="classdnac_1_1ConditionalCommand_1a99b854e3904de1e26245d8d811b9e697" prot="public" virt="non-virtual"><scope>dnac::ConditionalCommand</scope><name>~ConditionalCommand</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
