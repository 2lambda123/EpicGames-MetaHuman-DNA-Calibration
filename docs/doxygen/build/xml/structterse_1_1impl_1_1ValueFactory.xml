<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="structterse_1_1impl_1_1ValueFactory" kind="struct" language="C++" prot="public">
    <compoundname>terse::impl::ValueFactory</compoundname>
    <includes refid="Common_8h" local="no">Common.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="structterse_1_1impl_1_1ValueFactory_1afc1394548a0f6c8c938235e220d89a9b" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool terse::impl::ValueFactory&lt; T &gt;::NeedsAllocator</definition>
        <argsstring></argsstring>
        <name>NeedsAllocator</name>
        <qualifiedname>terse::impl::ValueFactory::NeedsAllocator</qualifiedname>
        <initializer>= <ref refid="structterse_1_1traits_1_1needs__allocator" kindref="compound">traits::needs_allocator</ref>&lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/src/terse/archives/Common.h" line="29" column="27" bodyfile="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/src/terse/archives/Common.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structterse_1_1impl_1_1ValueFactory_1a0c0ce6f0e85b6c9d39099df91067ec01" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool terse::impl::ValueFactory&lt; T &gt;::NeedsMemoryResource</definition>
        <argsstring></argsstring>
        <name>NeedsMemoryResource</name>
        <qualifiedname>terse::impl::ValueFactory::NeedsMemoryResource</qualifiedname>
        <initializer>= std::is_constructible&lt;T, <ref refid="classpma_1_1MemoryResource" kindref="compound">pma::MemoryResource</ref>*&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/src/terse/archives/Common.h" line="30" column="27" bodyfile="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/src/terse/archives/Common.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structterse_1_1impl_1_1ValueFactory_1ae7675f33b8c82f1bf30e1cc66736c7d4" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool terse::impl::ValueFactory&lt; T &gt;::IsPair</definition>
        <argsstring></argsstring>
        <name>IsPair</name>
        <qualifiedname>terse::impl::ValueFactory::IsPair</qualifiedname>
        <initializer>= <ref refid="structterse_1_1traits_1_1is__pair" kindref="compound">traits::is_pair</ref>&lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/src/terse/archives/Common.h" line="31" column="27" bodyfile="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/src/terse/archives/Common.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structterse_1_1impl_1_1ValueFactory_1a81455083ec05c6dd42c9e99adfd04d5b" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool terse::impl::ValueFactory&lt; T &gt;::IsTuple</definition>
        <argsstring></argsstring>
        <name>IsTuple</name>
        <qualifiedname>terse::impl::ValueFactory::IsTuple</qualifiedname>
        <initializer>= <ref refid="structterse_1_1traits_1_1is__tuple" kindref="compound">traits::is_tuple</ref>&lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/src/terse/archives/Common.h" line="32" column="27" bodyfile="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/src/terse/archives/Common.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structterse_1_1impl_1_1ValueFactory_1ab1af64b1d263e1008b3728acae211f29" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool terse::impl::ValueFactory&lt; T &gt;::IsPrimitive</definition>
        <argsstring></argsstring>
        <name>IsPrimitive</name>
        <qualifiedname>terse::impl::ValueFactory::IsPrimitive</qualifiedname>
        <initializer>= (!<ref refid="structterse_1_1impl_1_1ValueFactory_1afc1394548a0f6c8c938235e220d89a9b" kindref="member">NeedsAllocator</ref> &amp;&amp; !<ref refid="structterse_1_1impl_1_1ValueFactory_1a0c0ce6f0e85b6c9d39099df91067ec01" kindref="member">NeedsMemoryResource</ref> &amp; !<ref refid="structterse_1_1impl_1_1ValueFactory_1ae7675f33b8c82f1bf30e1cc66736c7d4" kindref="member">IsPair</ref> &amp; !<ref refid="structterse_1_1impl_1_1ValueFactory_1a81455083ec05c6dd42c9e99adfd04d5b" kindref="member">IsTuple</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/src/terse/archives/Common.h" line="33" column="27" bodyfile="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/src/terse/archives/Common.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structterse_1_1impl_1_1ValueFactory_1a53db163f35fcd72090cb78513c574bf4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ParentAllocator</type>
          </param>
          <param>
            <type>bool</type>
            <declname>IsPrimitive</declname>
            <defname>IsPrimitive</defname>
            <defval><ref refid="structterse_1_1impl_1_1ValueFactory_1ab1af64b1d263e1008b3728acae211f29" kindref="member">IsPrimitive</ref></defval>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; <ref refid="structterse_1_1impl_1_1ValueFactory_1ab1af64b1d263e1008b3728acae211f29" kindref="member">IsPrimitive</ref>, T &gt;::type</type>
        <definition>static std::enable_if&lt; IsPrimitive, T &gt;::type terse::impl::ValueFactory&lt; T &gt;::create</definition>
        <argsstring>(const ParentAllocator &amp;)</argsstring>
        <name>create</name>
        <qualifiedname>terse::impl::ValueFactory::create</qualifiedname>
        <param>
          <type>const ParentAllocator &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/src/terse/archives/Common.h" line="36" column="43" bodyfile="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/src/terse/archives/Common.h" bodystart="36" bodyend="38"/>
        <referencedby refid="structterse_1_1impl_1_1ValueFactory_1a496ebe1ba1cd2ebb037f355777aa8b5b" compoundref="Common_8h" startline="53" endline="58">terse::impl::ValueFactory&lt; T &gt;::create</referencedby>
      </memberdef>
      <memberdef kind="function" id="structterse_1_1impl_1_1ValueFactory_1ad49ef3256991c0d39e44dd7eed521f1b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ParentAllocator</type>
          </param>
          <param>
            <type>bool</type>
            <declname>IsPrimitive</declname>
            <defname>IsPrimitive</defname>
            <defval><ref refid="structterse_1_1impl_1_1ValueFactory_1ab1af64b1d263e1008b3728acae211f29" kindref="member">IsPrimitive</ref></defval>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt;!<ref refid="structterse_1_1impl_1_1ValueFactory_1ab1af64b1d263e1008b3728acae211f29" kindref="member">IsPrimitive</ref> &amp;&amp;<ref refid="structterse_1_1impl_1_1ValueFactory_1a0c0ce6f0e85b6c9d39099df91067ec01" kindref="member">NeedsMemoryResource</ref>, T &gt;::type</type>
        <definition>static std::enable_if&lt;!IsPrimitive &amp;&amp;NeedsMemoryResource, T &gt;::type terse::impl::ValueFactory&lt; T &gt;::create</definition>
        <argsstring>(const ParentAllocator &amp;alloc)</argsstring>
        <name>create</name>
        <qualifiedname>terse::impl::ValueFactory::create</qualifiedname>
        <param>
          <type>const ParentAllocator &amp;</type>
          <declname>alloc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/src/terse/archives/Common.h" line="41" column="43" bodyfile="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/src/terse/archives/Common.h" bodystart="41" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="structterse_1_1impl_1_1ValueFactory_1a8038427776a6ae107e5a8431c8dd4cef" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ParentAllocator</type>
          </param>
          <param>
            <type>bool</type>
            <declname>IsPrimitive</declname>
            <defname>IsPrimitive</defname>
            <defval><ref refid="structterse_1_1impl_1_1ValueFactory_1ab1af64b1d263e1008b3728acae211f29" kindref="member">IsPrimitive</ref></defval>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt;!<ref refid="structterse_1_1impl_1_1ValueFactory_1ab1af64b1d263e1008b3728acae211f29" kindref="member">IsPrimitive</ref> &amp;&amp;!<ref refid="structterse_1_1impl_1_1ValueFactory_1a0c0ce6f0e85b6c9d39099df91067ec01" kindref="member">NeedsMemoryResource</ref> &amp;&amp;<ref refid="structterse_1_1impl_1_1ValueFactory_1afc1394548a0f6c8c938235e220d89a9b" kindref="member">NeedsAllocator</ref>, T &gt;::type</type>
        <definition>static std::enable_if&lt;!IsPrimitive &amp;&amp;!NeedsMemoryResource &amp;&amp;NeedsAllocator, T &gt;::type terse::impl::ValueFactory&lt; T &gt;::create</definition>
        <argsstring>(const ParentAllocator &amp;alloc)</argsstring>
        <name>create</name>
        <qualifiedname>terse::impl::ValueFactory::create</qualifiedname>
        <param>
          <type>const ParentAllocator &amp;</type>
          <declname>alloc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/src/terse/archives/Common.h" line="46" column="43" bodyfile="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/src/terse/archives/Common.h" bodystart="46" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="structterse_1_1impl_1_1ValueFactory_1a496ebe1ba1cd2ebb037f355777aa8b5b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ParentAllocator</type>
          </param>
          <param>
            <type>bool</type>
            <declname>IsPrimitive</declname>
            <defname>IsPrimitive</defname>
            <defval><ref refid="structterse_1_1impl_1_1ValueFactory_1ab1af64b1d263e1008b3728acae211f29" kindref="member">IsPrimitive</ref></defval>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt;!<ref refid="structterse_1_1impl_1_1ValueFactory_1ab1af64b1d263e1008b3728acae211f29" kindref="member">IsPrimitive</ref> &amp;&amp;!<ref refid="structterse_1_1impl_1_1ValueFactory_1a0c0ce6f0e85b6c9d39099df91067ec01" kindref="member">NeedsMemoryResource</ref> &amp;&amp;!<ref refid="structterse_1_1impl_1_1ValueFactory_1afc1394548a0f6c8c938235e220d89a9b" kindref="member">NeedsAllocator</ref> &amp;&amp;<ref refid="structterse_1_1impl_1_1ValueFactory_1ae7675f33b8c82f1bf30e1cc66736c7d4" kindref="member">IsPair</ref>, T &gt;::type</type>
        <definition>static std::enable_if&lt;!IsPrimitive &amp;&amp;!NeedsMemoryResource &amp;&amp;!NeedsAllocator &amp;&amp;IsPair, T &gt;::type terse::impl::ValueFactory&lt; T &gt;::create</definition>
        <argsstring>(const ParentAllocator &amp;alloc)</argsstring>
        <name>create</name>
        <qualifiedname>terse::impl::ValueFactory::create</qualifiedname>
        <param>
          <type>const ParentAllocator &amp;</type>
          <declname>alloc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/src/terse/archives/Common.h" line="53" column="43" bodyfile="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/src/terse/archives/Common.h" bodystart="53" bodyend="58"/>
        <references refid="structterse_1_1impl_1_1ValueFactory_1a53db163f35fcd72090cb78513c574bf4" compoundref="Common_8h" startline="36" endline="38">terse::impl::ValueFactory&lt; T &gt;::create</references>
      </memberdef>
      <memberdef kind="function" id="structterse_1_1impl_1_1ValueFactory_1a488dc7598299713a0ff8c21632e2f4ca" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ParentAllocator</type>
          </param>
          <param>
            <type>bool</type>
            <declname>IsPrimitive</declname>
            <defname>IsPrimitive</defname>
            <defval><ref refid="structterse_1_1impl_1_1ValueFactory_1ab1af64b1d263e1008b3728acae211f29" kindref="member">IsPrimitive</ref></defval>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt;!<ref refid="structterse_1_1impl_1_1ValueFactory_1ab1af64b1d263e1008b3728acae211f29" kindref="member">IsPrimitive</ref> &amp;&amp;!<ref refid="structterse_1_1impl_1_1ValueFactory_1a0c0ce6f0e85b6c9d39099df91067ec01" kindref="member">NeedsMemoryResource</ref> &amp;&amp;!<ref refid="structterse_1_1impl_1_1ValueFactory_1afc1394548a0f6c8c938235e220d89a9b" kindref="member">NeedsAllocator</ref> &amp;&amp;!<ref refid="structterse_1_1impl_1_1ValueFactory_1ae7675f33b8c82f1bf30e1cc66736c7d4" kindref="member">IsPair</ref> &amp;&amp;<ref refid="structterse_1_1impl_1_1ValueFactory_1a81455083ec05c6dd42c9e99adfd04d5b" kindref="member">IsTuple</ref>, T &gt;::type</type>
        <definition>static std::enable_if&lt;!IsPrimitive &amp;&amp;!NeedsMemoryResource &amp;&amp;!NeedsAllocator &amp;&amp;!IsPair &amp;&amp;IsTuple, T &gt;::type terse::impl::ValueFactory&lt; T &gt;::create</definition>
        <argsstring>(const ParentAllocator &amp;alloc)</argsstring>
        <name>create</name>
        <qualifiedname>terse::impl::ValueFactory::create</qualifiedname>
        <param>
          <type>const ParentAllocator &amp;</type>
          <declname>alloc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/src/terse/archives/Common.h" line="61" column="43" bodyfile="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/src/terse/archives/Common.h" bodystart="61" bodyend="66"/>
        <references refid="structterse_1_1impl_1_1ValueFactory_1a53db163f35fcd72090cb78513c574bf4" compoundref="Common_8h" startline="36" endline="38">terse::impl::ValueFactory&lt; T &gt;::create</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>terse::impl::ValueFactory&lt; T &gt;</label>
        <link refid="structterse_1_1impl_1_1ValueFactory"/>
      </node>
    </collaborationgraph>
    <location file="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/src/terse/archives/Common.h" line="28" column="1" bodyfile="C:/source/MetaHuman-DNA-Calibration/dnacalib/DNACalib/src/terse/archives/Common.h" bodystart="28" bodyend="68"/>
    <listofallmembers>
      <member refid="structterse_1_1impl_1_1ValueFactory_1a53db163f35fcd72090cb78513c574bf4" prot="public" virt="non-virtual"><scope>terse::impl::ValueFactory</scope><name>create</name></member>
      <member refid="structterse_1_1impl_1_1ValueFactory_1ad49ef3256991c0d39e44dd7eed521f1b" prot="public" virt="non-virtual"><scope>terse::impl::ValueFactory</scope><name>create</name></member>
      <member refid="structterse_1_1impl_1_1ValueFactory_1a8038427776a6ae107e5a8431c8dd4cef" prot="public" virt="non-virtual"><scope>terse::impl::ValueFactory</scope><name>create</name></member>
      <member refid="structterse_1_1impl_1_1ValueFactory_1a496ebe1ba1cd2ebb037f355777aa8b5b" prot="public" virt="non-virtual"><scope>terse::impl::ValueFactory</scope><name>create</name></member>
      <member refid="structterse_1_1impl_1_1ValueFactory_1a488dc7598299713a0ff8c21632e2f4ca" prot="public" virt="non-virtual"><scope>terse::impl::ValueFactory</scope><name>create</name></member>
      <member refid="structterse_1_1impl_1_1ValueFactory_1ae7675f33b8c82f1bf30e1cc66736c7d4" prot="public" virt="non-virtual"><scope>terse::impl::ValueFactory</scope><name>IsPair</name></member>
      <member refid="structterse_1_1impl_1_1ValueFactory_1ab1af64b1d263e1008b3728acae211f29" prot="public" virt="non-virtual"><scope>terse::impl::ValueFactory</scope><name>IsPrimitive</name></member>
      <member refid="structterse_1_1impl_1_1ValueFactory_1a81455083ec05c6dd42c9e99adfd04d5b" prot="public" virt="non-virtual"><scope>terse::impl::ValueFactory</scope><name>IsTuple</name></member>
      <member refid="structterse_1_1impl_1_1ValueFactory_1afc1394548a0f6c8c938235e220d89a9b" prot="public" virt="non-virtual"><scope>terse::impl::ValueFactory</scope><name>NeedsAllocator</name></member>
      <member refid="structterse_1_1impl_1_1ValueFactory_1a0c0ce6f0e85b6c9d39099df91067ec01" prot="public" virt="non-virtual"><scope>terse::impl::ValueFactory</scope><name>NeedsMemoryResource</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
